	.TITLE VPTEST-VIDEO PINBALL SELF-TEST
	.CSECT
	.RADIX 16
	
;ENTRY POINTS
	.GLOBL HEX
	.GLOBL NMI		;NMI ROUTINE
	.GLOBL IRQ		;IRQ ROUTINE
	.GLOBL PWRON		;POWER ON PROCESSING
	.GLOBL STEST		;SELF-TEST PROCESSING
	
;EXTERNAL ENTRY POINTS
	.GLOBL START		;START OF PROGRAM AFTER POWER ON
	.GLOBL MUSIC		;MUSIC ENTRY POINT
	.GLOBL MOOLAH		;COIN ROUTINE
	
;MEMORY DEFINITIONS
	.GLOBL DVSR
	.GLOBL INPUT1
	.GLOBL INPUT2
	.GLOBL LEDOUT
	.GLOBL WTCHDG
	.GLOBL BALPOS
	.GLOBL OUT1
	.GLOBL OUT2
	.GLOBL OPTSW
	
;ZERO PAGE DECLARATION
	.GLOBL OUT1D
	.GLOBL OUT2D
	.GLOBL FRAME
	.GLOBL LEDS
	.GLOBL FLIP,FLIPDR,FLPFLG
	.GLOBL TEMP1,TEMP2,TEMP3,TEMP4
	.GLOBL PLUNG
	.GLOBL BONG
	.GLOBL CNTRL
	.GLOBL NOTEL
	.GLOBL OCTL
	.GLOBL $CMODE,$COINA
	
	
PROG	=2000			;PROGRAM STARTING ADDRESS (8K)
DOT1	=2A			;UPPER RIGHT DOT FOR DETERMINING EDGE OF PLAYFIELD
DOT2	=6A			;UPPER LEFT DOT FOR DETERMINING EDGE OF PLAYFIELD
	
	.SBTTL VIDEO PINBALL POWER-ON PROCESSING
PWRON:	SEI			;DISABLE IRQ
	CLD			;USE HEX ARITHMETIC
	LDX I,0FF
	TXS			;SET STACK POINTER
	LDA I,0
	TAX
10$:	STA ZX,0		;CLEAR FIRST 2 PAGES
	STA AX,100
	STA AX,200		;CLEAR PLAYFIELD WHICH IS NOT PRESET
	STA AX,300
	INX
	BNE 10$
	LDA I,40
	STA OUT2D
	STA A,OUT2		;STOP BELL
	LDA I,07
	STA OCTL		;SET MUSIC AND NMI OFF
	STA OUT1D
	STA A,OUT1D
	BIT A,INPUT1
	BVC STEST		;START SELF-TEST
	LDA A,OPTSW
	AND I,0C0
	ROL
	ROL
	ROL
	STA $CMODE		;SET COIN MODE
	CLI			;START IRQ'S NOW
	JMP START		;START GAME
	
	
	.SBTTL VIDEO PINBALL SELF-TEST PROCESSING
STEST:	SEI			;SELF-TEST
	LDA I,0C0
	STA A,OUT2		;TURN OFF NOISE-TURN ON ATTRACT
	LDX I,0
2$:	TXA			;FILL RAM WITH TEST PATTERN
	CLC
	ADC I,04
	STA ZX,0
	CLC
	ADC I,01
	STA AX,100
	CLC
	ADC I,01
	STA AX,200
	CLC
	ADC I,01
	STA AX,300
	CLC
	ADC I,01
	STA AX,400
	CLC
	ADC I,01
	STA AX,500
	CLC
	ADC I,01
	STA AX,600
	CLC
	ADC I,01
	STA AX,700
	STA A,WTCHDG
	INX
	BNE 2$
4$:	TXA			;TEST RAM AGAINST PATTERN
	CLC
	ADC I,04
	TAY
	EOR ZX,0
	BNE 10$			;IF FAILURE
	INY
	TYA
	EOR AX,100
	BNE 10$			;IF FAILURE
	INY
	TYA
	EOR AX,200
	BNE 10$			;IF FAILURE
	INY
	TYA
	EOR AX,300
	BNE 10$			;IF FAILURE
	INY
	TYA
	EOR AX,400
	BNE 10$			;IF FAILURE
	INY
	TYA
	EOR AX,500
	BNE 10$			;IF FAILURE
	INY
	TYA
	EOR AX,600
	BNE 10$			;IF FAILURE
	INY
	TYA
	EOR AX,700
	BNE 10$
	STA A,WTCHDG
	INX 
	BNE 4$			;LOOP THRU EACH PAGE
	TXA
6$:	STA AX,200		;CLEAR SCREEN
	STA AX,300
	STA AX,400
	STA AX,500
	STA AX,600
	STA AX,700
	INX
	BNE 6$
	BEQ STEST1		;NEXT-ROM TEST

10$:	SEC
20$:	ROR
	BEQ 40$			;END OF LOOP
	LDX I,00		;BELL ON
	BCC 22$
	LDX I,60		;BONG ON
22$:	STX A,OUT2
	LDX I,0
	LDY I,0
24$:	INX
	BNE 24$
	STA A,WTCHDG
	INY
	BNE 24$			;WAIT FOR AWHILE
	LDX I,40
	STX A,OUT2		;STOP NOISE
	LDX I,0
26$:	INX
	BNE 26$
	STA A,WTCHDG
	INY
	BNE 26$			;LOOP FOR AWHILE
	CLC
	BEQ 20$			;TRY NEXT BIT
	
40$:	STA A,WTCHDG
	BIT A,INPUT1
	BVC 40$			;WAIT FOR SELF-TEST OFF
	JMP PWRON		;TRY AGAIN

STEST1:	LDX I,7
	STX OUT1D		;TURN OFF NOISE
	LDA I,40
	STA OUT2D		;LEAVE BELL & ATTRACT OFF
	LDA I,0F
2$:	STA ZX,LEDS		;TURN ON ALL LEDS
	DEX
	BPL 2$
	STA OUT1D		;FLAG NMI (NOISE OFF, LOCKOUT COIL ON)
	LDA I,80
	STA A,300		;PUT BALL OFF SCREEN
	STA A,301
	STA A,320
	STA A,321
	LDA I,06
	STA TEMP2		;(TEMP2,TEMP2+1)=WHERE TO DISPLAY ERROR 
	STA TEMP2+1
	LDA I,PROG/100		;(TEMP3,TEMP3+1)=CURRENT ADDRESS FOR CHKSUMING
	STA TEMP3+1
	LDX I,0
10$:	LDA I,04
	STA TEMP4		;NUMBER OF PAGES OF CHECKSUM
	LDY I,0
	STY TEMP3
	TYA			;STARTING PATTERN FOR CHECKSUM
20$:	EOR NY,TEMP3
	INY
	BNE 20$			;CHECKSUM ONE PAGE
	STA A,WTCHDG
	INC TEMP3+1
	DEC TEMP4
	BNE 20$			;LOOP FOR 1K (4 PAGES)
	EOR I,55		;ENDING PATTERN
	BEQ 30$	
	STA TEMP1
	LSR
	LSR
	LSR
	LSR
	JSR HEX
	LDY I,0
	STA NY,TEMP2		;DISPLAY ERROR IN CHECKSUM
	LDA TEMP1
	JSR HEX
	INC TEMP2
	STA NY,TEMP2
	TXA
	JSR HEX
	LDY I,20
	STA NY,TEMP2		;DISPALY ROM NUMBER
	INC TEMP2		;SKIPS A SPACE
	INC TEMP2
30$:	INX
	CPX I,08
	BNE 10$			;LOOP THRU ALL PROM'S
	LDA I,DOT1		;ADD GUIDES FOR FITTING PLAYFIELD
	STA A,4AD		;1 BONUS
	STA A,5AD		;10 BONUS
	STA A,5A4		;EXTRA BALL
	STA A,701		;LEFT MIDDLE TARGET
	STA A,777		;BONUS LITE (UPPER LEFT CORNER)
	LDA I,DOT2
	STA A,242		;UPPER LEFT ROLLOVER
	STA A,26E		;UPPER TARGET
	STA A,5A2		;SPECIAL
	STA A,535		;DOUBLE BONUS
	LDA A,INPUT1
	AND I,3F
	STA TEMP1
	LDA A,INPUT2
	AND I,40
	ORA TEMP1
	STA TEMP1+1		;INITIAL SWITCH SETTINGS
	CLI
STEST3:	LDA A,INPUT2
	BMI STEST3		;WAIT FOR END OF VBLANK
2$:	LDA A,INPUT2
	BPL 2$			;WAIT FOR VBLANK
	STA A,WTCHDG
	LDY I,0
	LDA A,INPUT1
	AND I,3F
	STA TEMP1
	LDA A,INPUT2
	AND I,40
	ORA TEMP1
	CMP TEMP1+1
	BEQ 10$			;NO SWITCH CHANGE
	STA TEMP1+1	
	LDY I,20		;TURN ON BONG
10$:	STY TEMP1
	LDA OUT2D
	AND I,0DF
	ORA TEMP1
	STA OUT2D		;TURN ON/OFF BONG
	STA A,OUT2
	LDA FRAME
	BNE 20$			;NMI HALF SECOND FROM LAST
	LDA PLUNG
	BNE 18$			;IF PLUNGER READ THIS HALF SECOND
	LDA OUT1D
	AND I,10
	BNE 20$			;NMI ALREADY ON
	LDA OUT1D
	ORA I,10
	STA OUT1D
	STA A,OUT1		;TURN ON NMI
18$:	LDA I,0
	STA PLUNG
20$:	LDA PLUNG+1
	LSR
	LSR
	LSR
	LSR
	JSR HEX
	STA A,46E
	LDA PLUNG+1
	JSR HEX
	STA A,46F
	BIT A,INPUT1
	BVC STEST3
	JMP PWRON		;RESTART GAME

CKSUM7:	.BYTE 9B		;3C00-3FFF
	
	
;HEX-CONVERT HEX DIGIT
;
;ENTRY (A)=LOWER 4 BITS TO BE CONVERTED
;EXIT (A)=HEX DIGIT TO BE DISPLAYED (WHITE ON BLACKS)
HEX:	AND I,0F
	ORA I,70
	CMP I,7A
	BCC 1$		;IF 0 TO 9
	SBC I,39	;CHANGE BA-BF TO 81-86
1$:	RTS
	.SBTTL INTERRUPT PROCESSING ROUTINES
NMI:	PHA
	CLD
	LDA I,0EF
	AND OUT1D		;TURN OFF NMI
	STA OUT1D
	STA A,OUT1
	LDA I,01
	BIT A,INPUT2		;IF TWO QUICK
	BNE 30$			;A GLITCH-IGNORE IT
	LDA I,0
	STA PLUNG
	LDA I,07
	STA PLUNG+1
	LDA I,02
	BIT A,INPUT2
	BEQ 18$			;PLUNGER GOING WRONG WAY
10$:	BIT A,INPUT2		;CHECK PLUNGER
	BEQ 20$			;STOP COUNTING NOW
	DEC PLUNG
	BNE 10$			;WAIT FOR PLUNGER
	DEC PLUNG+1
	BNE 10$
	BEQ 30$			;SET SPEED TO ZERO
	
18$:	LDA I,0
	STA PLUNG+1		;SET ZERO VALUE
	BEQ 30$
	
20$:	ASL PLUNG
	ROL PLUNG+1
	ASL PLUNG
	ROL PLUNG+1
	ASL PLUNG
	ROL PLUNG+1
	SEC
	ROL PLUNG		;SET PLUNG NON-ZERO
	ROL PLUNG+1		;0 TO 7F RANGE
30$:	PLA
	RTI
	
	
IRQ:	PHA
	CLD
	TXA
	PHA
	TYA
	PHA
	LDA A,INPUT2
	BPL 1$			;NOT IN VBLANK
	LDA FRAME
	AND I,0F8
	STA FRAME		;START COUNT AT ZERO
1$:	INC FRAME		;INCREMENT FRAME COUNTER
	BNE 2$			;NO OVERFLOW
	INC FRAME+1
2$:	BIT A,INPUT1
	BVC 90$			;IF IN SELFTEST
	LDA FRAME
	LSR
	BCS 90$			;IF NOT 4/FRAME
	LSR
	BCS 20$			;IF NOT 2/FRAME
	JSR MUSIC		;CALL MUSIC
	LDA NOTEL
	STA A,DVSR		;CHANGE DIVISOR
	LDA OUT1D
	AND I,0F8
	ORA OCTL
	STA OUT1D
	STA A,OUT1		;CHANGE OCTAVE
20$:	LDA A,INPUT1		;GET COIN VALUES
	LSR
	ROR $COINA
	LSR
	ROR $COINA+2
	JSR MOOLAH		;CHECK FOR COINS
	LDA OUT2D
	AND I,0EF
	BCC 30$			;COIN COUNTER OFF
	LDX I,0C
	STX BONG		;SET BONG FOR CREDIT
	ORA I,10
30$:	STA OUT2D
	STA A,OUT2
	LDX I,01
40$:	LDA ZX,FLIPDR
	BEQ 50$			;IF FLIPPER NOT MOVING
	BPL 60$			;IF FLIPPER GOING UP
45$:	DEC ZX,FLIP
	DEC ZX,FLIP
	BPL 70$			;IF STILL WITHIN RANGE
	LDA I,0
	STA ZX,FLIP		;RESET VALUE
	BEQ 65$

50$:	LDA A,INPUT1
	AND AX,IRQA
	BNE 55$			;IF FLIPPER SW OFF
	LDA ZX,FLIP
	BNE 65$			;IF FLIPPER ALREADY UP
	INC ZX,FLIPDR		;SET DIRECTION UP
	BNE 60$

55$:	LDA ZX,FLIP
	BEQ 65$			;IF FLIPPER ALREADY DOWN
	DEC ZX,FLIPDR		;SET DIRECTION DOWN
	BNE 45$

60$:	INC ZX,FLIP		;MOVE FLIPPER UP
	INC ZX,FLIP
	LDA I,28
	CMP ZX,FLIP
	BCS 70$			;IF WITHIN RANGE
	STA ZX,FLIP		;SET MAX VALUE
65$:	LDA I,0
	STA ZX,FLPFLG		;ALLOW ANOTHER FLIPPER HIT
	STA ZX,FLIPDR		;RESET DIRECTION TO STOPPED
70$:	DEX
	BPL 40$			;DO BOTH FLIPPERS
90$:	LDA FRAME		;WRITE LEDS OUT
	AND I,07
	TAX
	LDA ZX,LEDS
	STA A,LEDOUT		;IRQ ACKNOWLEDGE ADN LED WRITE
	PLA			;RESTORE REGISTERS
	TAY
	PLA
	TAX
	PLA
	RTI

IRQA:	.BYTE 04,08		;MASK FOR FLIPPER BITS
	
	
	.WORD NMI
	.WORD PWRON
	.WORD IRQ
	.REPT 0
	.VCTRS 0F7C3,NMI	;DEVELOPMENT SYSTEM USE
	.VCTRS 0F7C8,IRQ
	.ENDM


	.END
                                                            